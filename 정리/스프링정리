  1. 어노테이션 : 어노테이션 쓸려면 xml 파일에서 컨텍스트 네임스페이스 체크!
    - @Component("id") : bean 객체 생성 (기본생성자)
                         아이디 지정 안하면 클래스 첫이름 소문자로변경이 아이디

    - @Autowired : 주로 변수위에 설정하여 해당 타입의 객체를 찾아서 자동으로 할당
                   해당 객체 setter작성할 필요가없다
                   스프링은 해당 어노테이션이 있으면 그 변수의 타입을 체크하고
                   메모리에 해당 타입의 객체가 메모리에 존재해야 그 객체에 변수를 주입 할 수있다.
                   없으면 에러남

    - @Qualifier : @Autowired와 같이쓰이는데 해당 객체에 대해서 상속받은 객체가 여러개가 있으면 어떤 객체를 해당 객체에 주입해야할지 모른다
                   그래서 에러를 뱉는다

    - @Resource(name="id") : Autowired는 변수의 타입을 기준으로 검색하지만,, 이거는 객체의 이름을 이용하여 의존성 주입처리를한다

    - @Inject : 위에꺼랑 같음

    - @Service : 비즈니스 로직을 처리하는 Service클래스 (XXXServiceImpl)

    - @Repository : 데이터베이스 연동을 처리하는 DAO 클래스(XXXDAO)

    - @Controller : 사용자 요청을 제어하는 Controller 클래스(XXXController)

2. 변경되지 않는 객체는 어노테이션으로 설정하여 사용하고, 변경될 가능성이 있는 객체는 XML 설정으로 사용!

3. AOP는!! 관심분리다!!

4. AOP를 구현하기위해선 pom.xml에 라이브러리 추가해서 메이븐프로젝트가 .jar파일 다운로드하도록!!

5. xml파일 네임스페이스에서 aop체크!

6. AOP용어정리

    - 조인포인트 : 클라이언트가 호출하는 모든 비즈니스 메소드

    - 포인트컷 : 필터링된 조인포인트

    - 어드바이스 : 공통 기능의 코드

    - 위빙 : 포인트컷으로 지정한 핵심 관심 메소드가 호출될 때, 어드바이스에 해당하는 횡단 메소드가 삽입되는 과정

    - 애스팩트 or 어드바이저 : 어떤 포인트컷 메소드에 어떤 어드바이스를 실행할 지 결정

7. 조인포인트 객체 메소드 사용하는방법
    - 어드바이스에 org.aspectj.lang.JoinPoint 임포트해서 인자값으로 JoinPoint 객체를 받는다

8. aop 어노테이션으로 구현!

      - <aop:aspectj-autoproxy</~~> xml에 선언하면 aop 관련 어노테이션들을 인식하고 용도에 맞게 처리해준다~!

      - @Pointcut: 여러 포인트 컷을 식별하기위한 식별자가 필요한데,, 참조메소드를 이용한다.. 어떤 처리를 목적으로 하지 않고 포인트 컷을 식별하는
                   이름으로만 사용된다.

      - 어드바이스 설정
        - @Before("포인트컷식별자메소드()")




그대와 나, 설레임

The Romanticㅌ

굿모닝 레이디

유자차

insomnia
